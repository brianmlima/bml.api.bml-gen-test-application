package org.bml.bml.gen.test.application.v0.models;

import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Converter;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import lombok.Getter;
import lombok.experimental.Accessors;

/**
 * Generated by API Builder - https://www.apibuilder.io Service version: 0.0.1 apibuilder 0.15.11
 * app.apibuilder.io/bml/bml-gen-test-application/0.0.1/bml_lombok
 *
 * <p>WARNING: not all features (notably unions) and data types work with the java generator yet.
 * please contact brianmlima@gmail.com
 *
 * <p>Test Enumeration provides a useful test for enumeration based code generation
 *
 * <p>This enum has the ability to map string values to enum instances. This is required because
 * this enum was generated from a definition that has enumeration values that do not necessarily
 * conform to java enum naming conventions
 */
@Accessors(fluent = true)
@JsonDeserialize(converter = TestEnumeration.Converters.ToEnum.class)
@JsonSerialize(converter = TestEnumeration.Converters.ToString.class)
public enum TestEnumeration {
  /** A foo enumeration entry */
  FOO("foo", "A foo enumeration entry"),

  /** A bar enumeration entry */
  BAR("bar", "A bar enumeration entry");

  /** Maps the values used to generate this enum to specific enum instances */
  private static final Map<String, TestEnumeration> API_VALUE__MAP;

  static {
    // Initialize API_VALUE__MAP to support lookup based on original enum value
    Map<String, TestEnumeration> tmp = new LinkedHashMap<>();
    // Add all values and original strings to tmp
    for (TestEnumeration e : values()) {
      tmp.put(e.apiValue, e);
    }
    API_VALUE__MAP = Collections.unmodifiableMap(tmp);
  }

  /** Holder for defined value for lookup and toString support */
  @Getter(onMethod = @__(@JsonValue))
  private final String apiValue;

  /** Holder for defined enum field description */
  @Getter private final String description;

  TestEnumeration(final String apiValue, final String description) {
    this.apiValue = apiValue;
    this.description = description;
  }

  public static final TestEnumeration fromApiValue(final String apiValue) {
    return API_VALUE__MAP.get(apiValue);
  }

  @Override
  public final String toString() {
    return this.apiValue;
  }

  public static class Converters {
    /** Hide the public constructor for quality gates. */
    private Converters() {}

    public static class ToEnum implements Converter<String, TestEnumeration> {
      @Override
      public TestEnumeration convert(final String apiValue) {
        return TestEnumeration.fromApiValue(apiValue);
      }

      @Override
      public JavaType getInputType(final TypeFactory typeFactory) {
        return typeFactory.constructType(String.class);
      }

      @Override
      public JavaType getOutputType(final TypeFactory typeFactory) {
        return typeFactory.constructType(TestEnumeration.class);
      }
    }

    public static class ToString implements Converter<TestEnumeration, String> {
      @Override
      public String convert(final TestEnumeration enumValue) {
        return enumValue.apiValue();
      }

      @Override
      public JavaType getInputType(final TypeFactory typeFactory) {
        return typeFactory.constructType(TestEnumeration.class);
      }

      @Override
      public JavaType getOutputType(final TypeFactory typeFactory) {
        return typeFactory.constructType(String.class);
      }
    }
  }
}
